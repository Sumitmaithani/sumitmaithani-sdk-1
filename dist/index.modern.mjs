import t from"isomorphic-unfetch";function e(){return e=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(t[s]=r[s])}return t},e.apply(this,arguments)}class r{constructor(t){this.apiKey=void 0,this.baseUrl=void 0,this.apiKey=t.apiKey,this.baseUrl=t.baseUrl||"https://jsonplaceholder.typicode.com"}request(r,s){const o=`${this.baseUrl}${r}`,n=e({},s,{headers:{"Content-Type":"application/json","api-key":this.apiKey}});return t(o,n).then(t=>{if(t.ok)return t.json();throw new Error(t.statusText)})}}const s="posts";class o extends r{}var n;n=o,[class extends r{getPostById(t){return this.request(`/${s}/${t}`)}getPosts(){return this.request(`/${s}`)}createPost(t){return this.request(`/${s}`,{method:"POST",body:JSON.stringify(t)})}}].forEach(t=>{Object.getOwnPropertyNames(t.prototype).forEach(e=>{Object.defineProperty(n.prototype,e,Object.getOwnPropertyDescriptor(t.prototype,e))})});export{o as default};
